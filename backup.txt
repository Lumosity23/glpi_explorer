import pickle
import types
from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn
from rich.panel import Panel
from rich.console import Console, Group
from rich.text import Text
from rich.live import Live
from rich.align import Align

class TopologyCache:
    def __init__(self, api_client, cache_file='topology_cache.pkl'):
        self.api_client = api_client
        self.cache_file = cache_file
        self.computers = {}
        self.network_equipments = {}
        self.passive_devices = {}
        self.cables = {}
        self.sockets = {}
        self.network_ports = {}
        self.equipment_to_sockets_map = {}

    def load_from_api(self, console):
        self.console = console

        logo = """
         ██████╗ ██╗     ██████╗ ██╗      ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██████╗ ███████╗██████╗ 
        ██╔════╝ ██║     ██╔══██╗██║      ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██╔══██╗██╔════╝██╔══██╗
        ██║  ███╗██║     ██████╔╝██║█████╗█████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██████╔╝█████╗  ██████╔╝
        ██║   ██║██║     ██╔═══╝ ██║╚════╝██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██╔══██╗██╔══╝  ██╔══██╗
        ╚██████╔╝███████╗██║     ██║      ███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║  ██║███████╗██║  ██║
         ╚═════╝ ╚══════╝╚═╝     ╚═╝      ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝
        """

        logo_text = Text(logo, justify="center", style="bold blue")

        progress_bar = Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
        )
        
        loading_group = Group(logo_text, progress_bar)
        panel = Panel(Align.center(loading_group))

        with Live(panel, console=console, redirect_stderr=False) as live:
            main_task = progress_bar.add_task("Chargement de la topologie...", total=6)

            self._load_computers(progress_bar, main_task)
            self._load_network_equipments(progress_bar, main_task)
            self._load_passive_devices(progress_bar, main_task)
            self._load_cables(progress_bar, main_task)
            self._load_sockets(progress_bar, main_task)
            self._load_network_ports(progress_bar, main_task)
            self._build_topology_graph()

            final_panel = Panel(
                Align.center(logo_text),
                title="Bienvenue dans GLPI Explorer",
                subtitle="v0.1"
            )
            live.update(final_panel)

    def _build_topology_graph(self):
        # Dictionnaires globaux pour un accès rapide
        all_equipment = {**self.computers, **self.network_equipments, **self.passive_devices}
        name_to_id_map = {getattr(eq, 'name', ''): eq_id for eq_id, eq in all_equipment.items()}

        # --- Étape 1: Initialisation des attributs sur tous les objets ---
        for equip in all_equipment.values():
            equip.ports = []
            equip.sockets = []
        for port in self.network_ports.values():
            port.parent = None
            port.socket = None
        for socket in self.sockets.values():
            socket.parent = None
            socket.port = None
            socket.connection = None

        # --- ÉTAPE 2: LIAISON PARENT-PORT & PARENT-SOCKET (LA CLÉ) ---
        # On parcourt les ports, qui connaissent leur parent ID
        for port in self.network_ports.values():
            parent_id = getattr(port, 'items_id', None)
            if parent_id in all_equipment:
                parent_equip = all_equipment[parent_id]
                port.parent = parent_equip
                parent_equip.ports.append(port)

        # On parcourt les sockets, qui connaissent aussi leur parent ID (parfois par nom)
        for socket in self.sockets.values():
            parent_id_or_name = getattr(socket, 'items_id', None)
            parent_equip = None
            if isinstance(parent_id_or_name, int):
                parent_equip = all_equipment.get(parent_id_or_name)
            elif isinstance(parent_id_or_name, str):
                parent_id = name_to_id_map.get(parent_id_or_name.lower())
                parent_equip = all_equipment.get(parent_id)

            if parent_equip:
                socket.parent = parent_equip
                parent_equip.sockets.append(socket)
                # On remplit notre index ici
                if parent_equip.id not in self.equipment_to_sockets_map:
                    self.equipment_to_sockets_map[parent_equip.id] = []
                self.equipment_to_sockets_map[parent_equip.id].append(socket.id)

        # --- ÉTAPE 3: LIAISON PORT-SOCKET ---
        for socket in self.sockets.values():
            port_id = getattr(socket, 'networkports_id', None)
            if port_id and port_id in self.network_ports:
                network_port = self.network_ports[port_id]
                socket.port = network_port
                network_port.socket = socket

        # --- ÉTAPE 4: LIAISON CÂBLE-SOCKET ---
        for cable in self.cables.values():
            socket_ids = [int(link['href'].split('/')[-1]) for link in getattr(cable, 'links', []) if link.get('rel') == 'Glpi\\Socket']
            if len(socket_ids) == 2:
                socket_a = self.sockets.get(socket_ids[0])
                socket_b = self.sockets.get(socket_ids[1])
                if socket_a and socket_b:
                    socket_a.connection = {'via_cable': cable, 'to_socket': socket_b}
                    socket_b.connection = {'via_cable': cable, 'to_socket': socket_a}

    def get_sockets_for_item_id(self, item_id):
        return self.equipment_to_sockets_map.get(item_id, [])

    def _process_and_flatten_ports(self, item_details):
        flattened_ports = []
        raw_ports_data = item_details.get("_networkports", {})
        
        if not raw_ports_data:
            return flattened_ports

        for port_type, port_list in raw_ports_data.items():
            for port_data in port_list:
                # Créer un objet simple avec uniquement les clés qui nous intéressent
                port_obj = types.SimpleNamespace(
                    id=port_data.get('id'),
                    name=port_data.get('name'),
                    mac=port_data.get('mac'),
                    speed=port_data.get('speed')
                    # Ajoutez d'autres clés si nécessaire
                )
                flattened_ports.append(port_obj)
        
        return flattened_ports

    def _load_computers(self, progress, main_task_id):
        progress.update(main_task_id, description="[cyan]Computers...")
        id_list = self.api_client.list_items('Computer', item_range="0-9999", only_id=True)
        if not id_list:
            progress.advance(main_task_id)
            return
        sub_task = progress.add_task("Chargement des détails...", total=len(id_list))
        for item_ref in id_list:
            item_id = item_ref.get('id')
            if item_id:
                details = self.api_client.get_item_details('Computer', item_id)
                if details:
                    details['itemtype'] = 'Computer'
                    item_obj = types.SimpleNamespace(**details)
                    item_obj.ports = self._process_and_flatten_ports(details)
                    self.computers[item_id] = item_obj
            progress.advance(sub_task)
        progress.remove_task(sub_task)
        progress.advance(main_task_id)

    def _load_network_equipments(self, progress, main_task_id):
        progress.update(main_task_id, description="[cyan]Network Equipments...")
        id_list = self.api_client.list_items('NetworkEquipment', item_range="0-9999", only_id=True)
        if not id_list:
            progress.advance(main_task_id)
            return
        sub_task = progress.add_task("Chargement des détails...", total=len(id_list))
        for item_ref in id_list:
            item_id = item_ref.get('id')
            if item_id:
                details = self.api_client.get_item_details('NetworkEquipment', item_id)
                if details:
                    details['itemtype'] = 'NetworkEquipment'
                    item_obj = types.SimpleNamespace(**details)
                    item_obj.ports = self._process_and_flatten_ports(details)
                    self.network_equipments[item_id] = item_obj
            progress.advance(sub_task)
        progress.remove_task(sub_task)
        progress.advance(main_task_id)

    def _load_passive_devices(self, progress, main_task_id):
        progress.update(main_task_id, description="[cyan]Passive Devices...")
        id_list = self.api_client.list_items('PassiveDCEquipment', item_range="0-9999", only_id=True)
        if not id_list:
            progress.advance(main_task_id)
            return
        sub_task = progress.add_task("Chargement des détails...", total=len(id_list))
        for item_ref in id_list:
            item_id = item_ref.get('id')
            if item_id:
                details = self.api_client.get_item_details('PassiveDCEquipment', item_id)
                if details:
                    details['itemtype'] = 'PassiveDCEquipment'
                    self.passive_devices[item_id] = types.SimpleNamespace(**details)
            progress.advance(sub_task)
        progress.remove_task(sub_task)
        progress.advance(main_task_id)

    def _load_cables(self, progress, main_task_id):
        progress.update(main_task_id, description="[cyan]Cables...")
        id_list = self.api_client.list_items('Cable', item_range="0-9999", only_id=True)
        if not id_list:
            progress.advance(main_task_id)
            return
        sub_task = progress.add_task("Chargement des détails...", total=len(id_list))
        for item_ref in id_list:
            item_id = item_ref.get('id')
            if item_id:
                details = self.api_client.get_item_details('Cable', item_id)
                if details:
                    details['itemtype'] = 'Cable'
                    self.cables[item_id] = types.SimpleNamespace(**details)
            progress.advance(sub_task)
        progress.remove_task(sub_task)
        progress.advance(main_task_id)

    def _load_sockets(self, progress, main_task_id):
        progress.update(main_task_id, description="[cyan]Sockets...")
        id_list = self.api_client.list_items('Glpi\\Socket', item_range="0-9999", only_id=True)
        if not id_list:
            progress.advance(main_task_id)
            return
        sub_task = progress.add_task("Chargement des détails...", total=len(id_list))
        for item_ref in id_list:
            item_id = item_ref.get('id')
            if item_id:
                details = self.api_client.get_item_details('Glpi\\Socket', item_id)
                if details:
                    details['itemtype'] = 'Glpi\\Socket'
                    self.sockets[item_id] = types.SimpleNamespace(**details)
            progress.advance(sub_task)
        progress.remove_task(sub_task)
        progress.advance(main_task_id)

    def _load_network_ports(self, progress, main_task_id):
        progress.update(main_task_id, description="[cyan]Network Ports...")
        id_list = self.api_client.list_items('NetworkPort', item_range="0-9999", only_id=True)
        if not id_list:
            progress.advance(main_task_id)
            return
        sub_task = progress.add_task("Chargement des détails...", total=len(id_list))
        for item_ref in id_list:
            item_id = item_ref.get('id')
            if item_id:
                details = self.api_client.get_item_details('NetworkPort', item_id)
                if details:
                    details['itemtype'] = 'NetworkPort'
                    self.network_ports[item_id] = types.SimpleNamespace(**details)
            progress.advance(sub_task)
        progress.remove_task(sub_task)
        progress.advance(main_task_id)

    def save_to_disk(self):
        with open(self.cache_file, 'wb') as f:
            pickle.dump(self, f)

    @staticmethod
    def load_from_disk(cache_file='topology_cache.pkl'):
        try:
            with open(cache_file, 'rb') as f:
                return pickle.load(f)
        except FileNotFoundError:
            return None














# src/topology_linker.py

class TopologyLinker:
    def __init__(self, cache):
        self.cache = cache
        self._all_equipment = {**self.cache.computers, **self.cache.network_equipments, **self.cache.passive_devices}
        self._name_to_equip_map = {getattr(eq, 'name', '').lower(): eq for eq in self._all_equipment.values()}

    def find_item(self, itemtype, name):
        """Recherche un item par son nom et son type dans le cache. LOGIQUE FIABLE."""
        target_dict = None
        if itemtype == 'Computer': target_dict = self.cache.computers
        elif itemtype == 'NetworkEquipment': target_dict = self.cache.network_equipments
        elif itemtype == 'PassiveDCEquipment': target_dict = self.cache.passive_devices
        # ... (vous pouvez ajouter d'autres types ici si nécessaire) ...
        
        if not target_dict:
            return None
        
        for item in target_dict.values():
            if getattr(item, 'name', '').lower() == name.lower():
                return item
        return None
        
    def find_parent_for_socket(self, socket_obj):
        """Trouve l'équipement parent d'un socket en se basant sur l'itemtype et l'id."""
        parent_itemtype = getattr(socket_obj, 'itemtype', None)
        parent_id = getattr(socket_obj, 'items_id', None)

        if not all([parent_itemtype, parent_id]):
            return None

        # Détermine dans quel dictionnaire du cache chercher
        target_dict = None
        if parent_itemtype == 'Computer':
            target_dict = self.cache.computers
        elif parent_itemtype == 'NetworkEquipment':
            target_dict = self.cache.network_equipments
        elif parent_itemtype == 'PassiveDCEquipment':
            target_dict = self.cache.passive_devices
        
        if target_dict:
            return target_dict.get(parent_id)
            
        return None

    def find_sockets_for_item(self, item_obj):
        """Trouve tous les sockets d'un équipement."""
        item_id = getattr(item_obj, 'id', None)
        item_name = getattr(item_obj, 'name', '').lower()
        if not (item_id or item_name): return []
        
        found_sockets = []
        for socket in self.cache.sockets.values():
            parent_id_or_name = getattr(socket, 'items_id', None)
            if (isinstance(parent_id_or_name, int) and parent_id_or_name == item_id) or \
               (isinstance(parent_id_or_name, str) and parent_id_or_name.lower() == item_name):
                found_sockets.append(socket)
        return found_sockets

    def find_connection_for_socket(self, start_socket):
        """Trouve le câble et l'autre socket connecté."""
        start_socket_id = getattr(start_socket, 'id', None)
        if not start_socket_id: return None

        for cable in self.cache.cables.values():
            # Correction pour gérer les cas où 'links' n'existe pas ou est None
            links = getattr(cable, 'links', [])
            if not links: continue
            
            socket_ids = []
            for link in links:
                if link.get('rel') == 'Glpi\\Socket':
                    try:
                        socket_ids.append(int(link['href'].split('/')[-1]))
                    except (ValueError, IndexError):
                        continue # Ignorer les href mal formés

            if len(socket_ids) == 2 and start_socket_id in socket_ids:
                other_id = socket_ids[0] if socket_ids[1] == start_socket_id else socket_ids[1]
                other_socket = self.cache.sockets.get(other_id)
                if other_socket:
                    return {'via_cable': cable, 'other_socket': other_socket}
        return None

    def _get_hub_out_socket(self, hub_equip):
        """Trouve le port OUT d'un hub (nommé 'OUT' ou numéro le plus élevé)."""
        sockets_on_hub = self.find_sockets_for_item(hub_equip)
        if not sockets_on_hub: return None
        
        out_socket = None
        max_num = -1

        # Priorité 1: Chercher un port nommé "OUT"
        for s in sockets_on_hub:
            if "OUT" in s.name.upper():
                return s

        # Priorité 2: Chercher le port avec le numéro le plus élevé
        for s in sockets_on_hub:
            try:
                # Extrait le dernier nombre trouvé dans le nom du port
                numbers = [int(part) for part in s.name.replace("-", " ").split() if part.isdigit()]
                if not numbers: continue
                port_num = numbers[-1]
                if port_num > max_num:
                    max_num = port_num
                    out_socket = s
            except (ValueError, IndexError):
                continue
        return out_socket

    def _get_passive_out_socket(self, passive_equip, in_socket):
        """Trouve le port OUT correspondant à un port IN sur un passif."""
        # Logique simple basée sur le remplacement de "IN" par "OUT"
        if "IN" not in in_socket.name.upper(): return None
        
        # Gère des variations comme "Port 1 IN" -> "Port 1 OUT"
        # ou "IN 1" -> "OUT 1"
        out_name = in_socket.name.upper().replace("IN", "OUT")
        
        sockets_on_passive = self.find_sockets_for_item(passive_equip)
        return next((s for s in sockets_on_passive if s.name.upper() == out_name), None)

    def get_next_hop(self, current_socket):
        """
        Calcule le prochain saut dans la topologie à partir d'un socket donné.
        La logique est priorisée :
        1. Traversée d'équipement (Hub, Passif)
        2. Connexion par câble
        """
        parent_equip = self.find_parent_for_socket(current_socket)
        if not parent_equip:
            return {'type': 'end', 'reason': 'Socket orphelin'}

        itemtype = getattr(parent_equip, 'itemtype', None)

        # --- Logique de Traversée ---
        # Si on est sur un équipement qui doit être traversé, on le fait en priorité.
        
        # 1a. Traversée de Hub
        # Si on arrive sur un hub, on doit en ressortir par le port de sortie (uplink)
        if itemtype == 'NetworkEquipment' and 'hub' in getattr(parent_equip, 'name', '').lower():
            out_socket = self._get_hub_out_socket(parent_equip)
            # On vérifie qu'on n'est pas déjà sur le port de sortie pour éviter une boucle
            if out_socket and out_socket.id != current_socket.id:
                return {
                    'type': 'traversal',
                    'traversed_item': parent_equip,
                    'from_socket': current_socket,
                    'to_socket': out_socket
                }
            # Si on est déjà sur le port de sortie, on ne traverse pas, on cherche la connexion.
            # La logique continue plus bas.

        # 1b. Traversée d'équipement passif (ex: Patch Panel)
        # Si on arrive sur un port IN, on cherche le port OUT correspondant
        if itemtype == 'PassiveDCEquipment':
            out_socket = self._get_passive_out_socket(parent_equip, current_socket)
            if out_socket:
                return {
                    'type': 'traversal',
                    'traversed_item': parent_equip,
                    'from_socket': current_socket,
                    'to_socket': out_socket
                }
            # Si on est sur un port OUT, on ne traverse pas, on cherche la connexion.
            # La logique continue plus bas.

        # --- Logique de Connexion ---
        # Si aucune logique de traversée ne s'est appliquée, on cherche un câble.
        connection = self.find_connection_for_socket(current_socket)
        if connection:
            return {
                'type': 'connection',
                'via_cable': connection['via_cable'],
                'next_socket': connection['other_socket']
            }

        # --- Fin de Trace ---
        # Si on n'a trouvé ni traversée ni connexion, c'est la fin.
        return {'type': 'end', 'reason': 'Fin de ligne (pas de connexion ou de logique de traversée applicable)'}
















        # src/commands/trace_command.py
from .base_command import BaseCommand
from ..topology_linker import TopologyLinker
from rich.panel import Panel
from rich.table import Table

class TraceCommand(BaseCommand):
    def __init__(self, api_client, console, cache):
        super().__init__(api_client, console, cache)
        self.aliases = ["tr"]

    def get_help_message(self):
        return { "description": "Suit le chemin réseau d'un équipement.", "usage": "trace <type> <nom_objet>" }

    def execute(self, args):
        try:
            user_type_alias, item_name = args.split(maxsplit=1)
        except ValueError:
            self.console.print(Panel("Usage: trace <type> <nom_objet>", title="[red]Erreur[/red]"))
            return
        
        linker = TopologyLinker(self.cache)
        start_item = linker.find_item(self.TYPE_ALIASES.get(user_type_alias.lower()), item_name)
        if not start_item:
            self.console.print(Panel(f"Objet '{item_name}' non trouvé dans le cache.", title="[red]Erreur[/red]"))
            return

        start_sockets = linker.find_sockets_for_item(start_item)
        if not start_sockets:
            self.console.print(Panel(f"Aucun socket physique trouvé pour {start_item.name}.", border_style="yellow"))
            return

        # Pour l'instant, on prend le premier socket. Le choix interactif est pour plus tard.
        current_socket = start_sockets[0]
        
        trace_table = Table(title=f"Trace depuis {start_item.name}", expand=True)
        trace_table.add_column("Étape", justify="right")
        trace_table.add_column("Équipement")
        trace_table.add_column("Port / Traversée")
        trace_table.add_column("Via (Câble)")
        
        visited_sockets = set()
        step = 1

        while current_socket and current_socket.id not in visited_sockets:
            visited_sockets.add(current_socket.id)
            
            parent = linker.find_parent_for_socket(current_socket)
            
            # --- Traitement du hop actuel ---
            connection = linker.find_connection_for_socket(current_socket)
            if not connection:
                trace_table.add_row(str(step), getattr(parent, 'name', 'N/A'), current_socket.name, "[yellow]FIN DE LIGNE[/yellow]")
                break
            
            cable = connection['via_cable']
            next_socket = connection['other_socket']
            
            # --- Logique de traversée / concentration ---
            next_parent = linker.find_parent_for_socket(next_socket)
            
            # Cas A: Équipement passif
            if next_parent and getattr(next_parent, 'itemtype', None) == 'PassiveDCEquipment' and " IN" in next_socket.name.upper():
                out_socket = linker._get_passive_out_socket(next_parent, next_socket)
                if out_socket:
                    trace_table.add_row(
                        str(step), getattr(parent, 'name', 'N/A'), current_socket.name,
                        f"[green]{getattr(cable, 'name', 'N/A')}[/green] -> [cyan]{getattr(next_parent, 'name', 'N/A')}[/cyan] | [bold]{next_socket.name} -> {out_socket.name}[/bold]"
                    )
                    current_socket = out_socket
                    step += 1
                    continue
            
            # Cas B: Hub
            if next_parent and getattr(next_parent, 'itemtype', None) == 'NetworkEquipment' and getattr(next_parent, 'name', '').upper().startswith('HB'):
                out_socket = linker._get_hub_out_socket(next_parent)
                # Si on arrive sur un port IN, on saute au OUT
                if out_socket and next_socket != out_socket:
                    trace_table.add_row(
                        str(step), getattr(parent, 'name', 'N/A'), current_socket.name,
                        f"[green]{getattr(cable, 'name', 'N/A')}[/green] -> [cyan]{getattr(next_parent, 'name', 'N/A')}[/cyan] | [bold]{next_socket.name} -> {out_socket.name}[/bold]"
                    )
                    current_socket = out_socket
                    step += 1
                    continue

            # Cas C: Connexion normale
            trace_table.add_row(
                str(step), getattr(parent, 'name', 'N/A'), current_socket.name,
                f"[green]{getattr(cable, 'name', 'N/A')}[/green] -> [cyan]{getattr(next_parent, 'name', 'N/A')}[/cyan] | [bold]{next_socket.name}[/bold]"
            )
            current_socket = next_socket
            step += 1
        
        self.console.print(trace_table)